{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the AlBoursa Cars platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the user."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "profilePictureUrl": {
          "type": "string",
          "description": "URL of the user's profile picture.",
          "format": "uri"
        },
        "registrationDate": {
          "type": "string",
          "description": "Date and time when the user registered.",
          "format": "date-time"
        },
        "preferredLanguage": {
          "type": "string",
          "description": "The user's preferred language (e.g., 'ar', 'en', 'fr')."
        }
      },
      "required": [
        "id",
        "email",
        "firstName",
        "lastName",
        "registrationDate"
      ]
    },
    "VehicleListing": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VehicleListing",
      "type": "object",
      "description": "Represents a vehicle listing on the AlBoursa Cars platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the vehicle listing entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the listing. (Relationship: User 1:N VehicleListing)"
        },
        "make": {
          "type": "string",
          "description": "Make of the vehicle (e.g., Hyundai)."
        },
        "model": {
          "type": "string",
          "description": "Model of the vehicle (e.g., SantaFe)."
        },
        "year": {
          "type": "number",
          "description": "Year the vehicle was manufactured."
        },
        "fuelType": {
          "type": "string",
          "description": "Type of fuel the vehicle uses (e.g., Gasoline)."
        },
        "transmission": {
          "type": "string",
          "description": "Type of transmission (e.g., Automatic)."
        },
        "city": {
          "type": "string",
          "description": "City where the vehicle is located."
        },
        "price": {
          "type": "number",
          "description": "Price of the vehicle."
        },
        "description": {
          "type": "string",
          "description": "Description of the vehicle."
        },
        "mileage": {
          "type": "number",
          "description": "The mileage of the vehicle in kilometers."
        },
        "color": {
          "type": "string",
          "description": "The color of the vehicle."
        },
        "contactNumber": {
          "type": "string",
          "description": "Contact phone number for the listing."
        },
        "imageUrls": {
          "type": "array",
          "description": "Array of URLs for the vehicle's images.",
          "items": {
            "type": "string"
          }
        },
        "listingDate": {
          "type": "string",
          "description": "Date and time when the listing was created.",
          "format": "date-time"
        },
        "isFeatured": {
          "type": "boolean",
          "description": "Indicates if the listing is featured."
        },
        "viewCount": {
          "type": "number",
          "description": "Number of times the listing has been viewed."
        }
      },
      "required": [
        "id",
        "userId",
        "make",
        "model",
        "year",
        "fuelType",
        "transmission",
        "city",
        "price",
        "description",
        "contactNumber",
        "listingDate"
      ]
    },
    "FAQ": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FAQ",
      "type": "object",
      "description": "Represents a frequently asked question.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the FAQ entity."
        },
        "question": {
          "type": "string",
          "description": "The question text."
        },
        "answer": {
          "type": "string",
          "description": "The answer text."
        },
        "language": {
          "type": "string",
          "description": "Language of the FAQ (e.g., 'ar', 'en', 'fr')."
        }
      },
      "required": [
        "id",
        "question",
        "answer",
        "language"
      ]
    },
    "ContactMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContactMessage",
      "type": "object",
      "description": "Represents a contact message sent by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the contact message entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the sender."
        },
        "email": {
          "type": "string",
          "description": "Email address of the sender.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the sender."
        },
        "message": {
          "type": "string",
          "description": "The message content."
        },
        "sentDate": {
          "type": "string",
          "description": "Date and time when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "message",
        "sentDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile data. Path-based ownership ensures only the user can access their data."
        }
      },
      {
        "path": "/vehicleListings/{vehicleListingId}",
        "definition": {
            "entityName": "VehicleListing",
            "schema": {
                "$ref": "#/backend/entities/VehicleListing"
            },
            "description": "Stores all vehicle listings. Publicly readable, but only writable by the owning user."
        }
      },
      {
        "path": "/faqs/{faqId}",
        "definition": {
          "entityName": "FAQ",
          "schema": {
            "$ref": "#/backend/entities/FAQ"
          },
          "description": "Stores frequently asked questions. Accessible to all users."
        }
      },
      {
        "path": "/contactMessages/{contactMessageId}",
        "definition": {
          "entityName": "ContactMessage",
          "schema": {
            "$ref": "#/backend/entities/ContactMessage"
          },
          "description": "Stores contact messages sent by users. Access controlled by backend functions."
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support AlBoursa Cars' multi-faceted requirements, focusing on security, scalability, and maintainability. The design incorporates key principles like Authorization Independence and Structural Segregation to create a robust and easily manageable database. It addresses key application requirements like vehicle listings, user profiles, FAQs, and contact messages, while also preparing the groundwork for features such as admin dashboards and multilingual support.\n\n**Authorization Independence:** Authorization independence is achieved through path-based ownership for private user data (users and their listings). \n\n**Structural Segregation:** Collections are segregated based on their access needs. User-specific data resides under `/users/{userId}`, ensuring that rules for user data don't interfere with global data like FAQs. Vehicle listings are stored under `/vehicleListings/{vehicleListingId}` to allow public read access while maintaining ownership-based write access.\n\n**QAPs Support:** The structure supports secure `list` operations (QAPs) by segregating data into homogeneous collections (Structural Segregation). Path-based ownership ensures listings can only be listed by authorized users. All `/vehicleListings` are owned by a single user. This removes the need for complex filtering in rules.\n\n**Additional Considerations**\n\n*   **Global Data:** FAQs are stored in a root-level collection (`/faqs`) accessible by all users. This is appropriate since they're designed to be publicly available.\n*   **Contact Messages:** Contact messages are stored in a root-level collection (`/contactMessages`). Access is controlled by backend functions.\n*   **Scalability:** The structure is designed to scale. User-specific data is organized under the user's ID, allowing for efficient data retrieval and management as the user base grows.\n*   **Future Features:** The structure can accommodate future features, such as admin panels and multilingual support. For example, the `/users/{userId}` structure allows storing user-specific preferences, including language settings."
  }
}

    