{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the AlBoursa Cars platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the user."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "language": {
          "type": "string",
          "description": "Preferred language of the user (e.g., 'ar', 'en', 'fr')."
        }
      },
      "required": [
        "id",
        "email",
        "phoneNumber"
      ]
    },
    "VehicleListing": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VehicleListing",
      "type": "object",
      "description": "Represents a vehicle listing on the AlBoursa Cars platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the vehicle listing."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N VehicleListing)"
        },
        "make": {
          "type": "string",
          "description": "Make of the vehicle (e.g., Hyundai)."
        },
        "model": {
          "type": "string",
          "description": "Model of the vehicle (e.g., SantaFe)."
        },
        "year": {
          "type": "number",
          "description": "Year the vehicle was manufactured."
        },
        "fuelType": {
          "type": "string",
          "description": "Type of fuel the vehicle uses (e.g., бенزين)."
        },
        "transmission": {
          "type": "string",
          "description": "Transmission type of the vehicle (e.g., أوتوماتيكي)."
        },
        "city": {
          "type": "string",
          "description": "City where the vehicle is located (e.g., نواكشوط)."
        },
        "price": {
          "type": "number",
          "description": "Price of the vehicle."
        },
        "description": {
          "type": "string",
          "description": "Description of the vehicle listing."
        },
        "imageUrl": {
          "type": "array",
          "description": "Urls of images",
          "items": {
            "type": "string"
          }
        },
        "mileage": {
          "type": "number",
          "description": "Mileage of the vehicle in kilometers."
        },
        "color": {
          "type": "string",
          "description": "Color of the vehicle."
        },
        "contactNumber": {
          "type": "string",
          "description": "Contact phone number for the seller."
        },
        "isFeatured": {
          "type": "boolean",
          "description": "Indicates whether the listing is featured."
        },
        "viewCount": {
          "type": "number",
          "description": "Number of times the listing has been viewed."
        },
        "postedDate": {
          "type": "string",
          "description": "Date and time when the listing was posted.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "make",
        "model",
        "year",
        "fuelType",
        "transmission",
        "city",
        "price",
        "description",
        "contactNumber"
      ]
    },
    "FAQ": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "FAQ",
      "type": "object",
      "description": "Represents a frequently asked question.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the FAQ."
        },
        "question": {
          "type": "string",
          "description": "The question text."
        },
        "answer": {
          "type": "string",
          "description": "The answer to the question."
        },
        "language": {
          "type": "string",
          "description": "The language of the FAQ (e.g., 'ar', 'en', 'fr')."
        }
      },
      "required": [
        "id",
        "question",
        "answer",
        "language"
      ]
    },
    "ContactMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContactMessage",
      "type": "object",
      "description": "Represents a contact message sent by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the contact message."
        },
        "name": {
          "type": "string",
          "description": "Name of the person sending the message."
        },
        "email": {
          "type": "string",
          "description": "Email address of the person sending the message.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the person sending the message."
        },
        "message": {
          "type": "string",
          "description": "The message content."
        },
        "sentDate": {
          "type": "string",
          "description": "Date and time when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "message",
        "sentDate"
      ]
    },
    "AboutUs": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AboutUs",
      "type": "object",
      "description": "Represents the About Us information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the About Us information."
        },
        "content": {
          "type": "string",
          "description": "The content of the About Us page."
        },
        "language": {
          "type": "string",
          "description": "The language of the About Us content (e.g., 'ar', 'en', 'fr')."
        }
      },
      "required": [
        "id",
        "content",
        "language"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. User's id is derived from Firebase Authentication.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user, derived from Firebase Authentication."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/listings/{listingId}",
        "definition": {
          "entityName": "VehicleListing",
          "schema": {
            "$ref": "#/backend/entities/VehicleListing"
          },
          "description": "Stores vehicle listings owned by a specific user. This structure enables path-based ownership for secure access.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the listing."
            },
            {
              "name": "listingId",
              "description": "The unique identifier for the vehicle listing."
            }
          ]
        }
      },
      {
        "path": "/faqs/{faqId}",
        "definition": {
          "entityName": "FAQ",
          "schema": {
            "$ref": "#/backend/entities/FAQ"
          },
          "description": "Stores frequently asked questions for different languages.",
          "params": [
            {
              "name": "faqId",
              "description": "The unique identifier for the FAQ."
            }
          ]
        }
      },
      {
        "path": "/contactMessages/{contactMessageId}",
        "definition": {
          "entityName": "ContactMessage",
          "schema": {
            "$ref": "#/backend/entities/ContactMessage"
          },
          "description": "Stores contact messages sent by users.",
          "params": [
            {
              "name": "contactMessageId",
              "description": "The unique identifier for the contact message."
            }
          ]
        }
      },
      {
        "path": "/aboutUs/{aboutUsId}",
        "definition": {
          "entityName": "AboutUs",
          "schema": {
            "$ref": "#/backend/entities/AboutUs"
          },
          "description": "Stores 'About Us' content for different languages.",
          "params": [
            {
              "name": "aboutUsId",
              "description": "The unique identifier for the About Us content."
            }
          ]
        }
      },
      {
        "path": "/listings/{listingId}",
        "definition": {
          "entityName": "VehicleListing",
          "schema": {
            "$ref": "#/backend/entities/VehicleListing"
          },
          "description": "Stores a denormalized collection of publicly accessible vehicle listings. This allows for efficient listing and filtering across all users without requiring complex security rules or `get()` calls.",
          "params": [
            {
              "name": "listingId",
              "description": "The unique identifier for the vehicle listing."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support AlBoursa Cars, a platform for buying and selling new and used cars in Mauritania. It prioritizes authorization independence, clarity, and security using path-based ownership for user-related data and segregated collections for different data types. Each listing is owned by a specific user, enabling straightforward security rules. This design avoids hierarchical `get()` calls in security rules, ensuring atomic operations and debuggability. Segregation of data with different access needs (e.g., user-owned listings vs. FAQs) into separate collections simplifies security rules and list operations.\n\n*   **Authorization Independence (CRITICAL):** Path-based ownership is used. The `VehicleListing` documents are stored within the `users/{userId}/listings/{listingId}` path, eliminating the need to fetch parent document attributes within the security rules.\n*   **DBAC:** There is no role-based access control required, given the application requirements. Authentication relies solely on `request.auth.uid`.\n*   **QAPs:** Listing operations for `users/{userId}/listings` are securely managed through path-based ownership. Public listing retrieval is supported by a separate `listings` collection, which can contain denormalized listing data to enable filtering and listing without complex rules.\n*   **Contact Messages:** Stored in a top-level `contactMessages` collection, allowing simple rules to manage access to these messages."
  }
}