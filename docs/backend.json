{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the AlBoursa Cars platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "phoneNumber": {
          "type": "string",
          "description": "Phone number of the user."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "profilePicture": {
          "type": "string",
          "description": "URL of the user's profile picture.",
          "format": "uri"
        },
        "preferredLanguage": {
          "type": "string",
          "description": "Preferred language of the user (e.g., ar, en, fr)."
        },
        "registrationDate": {
          "type": "string",
          "description": "Date and time the user registered.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "phoneNumber",
        "firstName",
        "lastName"
      ]
    },
    "VehicleListing": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VehicleListing",
      "type": "object",
      "description": "Represents a vehicle listing on the AlBoursa Cars platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the VehicleListing entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N VehicleListing)"
        },
        "brand": {
          "type": "string",
          "description": "Brand of the vehicle (e.g., Hyundai, Toyota)."
        },
        "model": {
          "type": "string",
          "description": "Model of the vehicle (e.g., Santa Fe)."
        },
        "year": {
          "type": "number",
          "description": "Year the vehicle was manufactured."
        },
        "fuelType": {
          "type": "string",
          "description": "Type of fuel the vehicle uses (e.g., gasoline, diesel)."
        },
        "transmissionType": {
          "type": "string",
          "description": "Type of transmission (e.g., automatic, manual)."
        },
        "city": {
          "type": "string",
          "description": "City where the vehicle is located."
        },
        "price": {
          "type": "number",
          "description": "Price of the vehicle."
        },
        "description": {
          "type": "string",
          "description": "Description of the vehicle."
        },
        "mileage": {
          "type": "number",
          "description": "Mileage of the vehicle."
        },
        "color": {
          "type": "string",
          "description": "Color of the vehicle."
        },
        "numberOfOwners": {
          "type": "number",
          "description": "Number of previous owners of the vehicle."
        },
        "condition": {
          "type": "string",
          "description": "Condition of the vehicle (e.g., used, new)."
        },
        "images": {
          "type": "array",
          "description": "Array of URLs of the vehicle's images.",
          "items": {
            "type": "string"
          }
        },
        "contactNumber": {
          "type": "string",
          "description": "Contact phone number for the listing."
        },
        "isFeatured": {
          "type": "boolean",
          "description": "Indicates if the listing is featured."
        },
        "postDate": {
          "type": "string",
          "description": "Date and time the listing was posted.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "brand",
        "model",
        "year",
        "fuelType",
        "transmissionType",
        "city",
        "price",
        "description",
        "contactNumber"
      ]
    },
    "AiImprovementSuggestion": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AiImprovementSuggestion",
      "type": "object",
      "description": "Represents AI powered suggestion for a vehicle listing.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the AiImprovementSuggestion entity."
        },
        "vehicleListingId": {
          "type": "string",
          "description": "Reference to VehicleListing. (Relationship: VehicleListing 1:N AiImprovementSuggestion)"
        },
        "field": {
          "type": "string",
          "description": "The field the suggestion applies to.  For example 'description'."
        },
        "originalValue": {
          "type": "string",
          "description": "The original value of the field, before the suggestion."
        },
        "suggestedValue": {
          "type": "string",
          "description": "The value suggested by the AI."
        },
        "reason": {
          "type": "string",
          "description": "The reasoning behind why the AI made this suggestion."
        },
        "confidenceScore": {
          "type": "number",
          "description": "A score representing how confident the AI is that this is a good suggestion."
        },
        "suggestionDate": {
          "type": "string",
          "description": "Date and time the suggestion was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "vehicleListingId",
        "field",
        "suggestedValue",
        "reason"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Access is restricted to the user themselves, based on their `userId` matching `request.auth.uid`.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/vehicleListings/{vehicleListingId}",
        "definition": {
          "entityName": "VehicleListing",
          "schema": {
            "$ref": "#/backend/entities/VehicleListing"
          },
          "description": "Stores vehicle listings created by users. Includes denormalized 'userId' field for authorization independence, ensuring only the listing owner can manage it.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user (owner of the listing)."
            },
            {
              "name": "vehicleListingId",
              "description": "The unique identifier for the vehicle listing."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/vehicleListings/{vehicleListingId}/aiImprovementSuggestions/{aiImprovementSuggestionId}",
        "definition": {
          "entityName": "AiImprovementSuggestion",
          "schema": {
            "$ref": "#/backend/entities/AiImprovementSuggestion"
          },
          "description": "Stores AI improvement suggestions for vehicle listings. The path enforces that suggestions are associated with a specific vehicle listing. The 'userId' and 'vehicleListingId' are denormalized to support authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user (owner of the listing)."
            },
            {
              "name": "vehicleListingId",
              "description": "The unique identifier for the vehicle listing."
            },
            {
              "name": "aiImprovementSuggestionId",
              "description": "The unique identifier for the AI improvement suggestion."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure is designed to support the AlBoursa Cars platform, focusing on secure, scalable, and maintainable data management. It leverages path-based ownership for user data and vehicle listings, ensuring clear ownership and simplified security rules. By avoiding hierarchical authorization dependencies, it also enables atomic operations (transactions/batches) and enhances debuggability. Furthermore, denormalization is strategically employed to eliminate `get()` calls in security rules.\n\n*   **Users:** User data is stored under `/users/{userId}`, allowing easy management of user profiles and enabling straightforward security rules based on `request.auth.uid`.\n*   **Vehicle Listings:** Vehicle listings are stored under `/users/{userId}/vehicleListings/{vehicleListingId}`, ensuring that listings are associated with a specific user.  The `userId` is denormalized into the `VehicleListing` document itself to support authorization independence.\n*   **AI Improvement Suggestions:** AI improvement suggestions are nested under the specific vehicle listing at `/users/{userId}/vehicleListings/{vehicleListingId}/aiImprovementSuggestions/{aiImprovementSuggestionId}`, associating each suggestion with its parent listing. The `userId` and `vehicleListingId` are both denormalized to support authorization independence. This supports the QAP of only allowing the vehicle listing owner to read, write, or list AI Improvement suggestions. This ensures that only authorized users can access and modify suggestions related to their listings.\n\nThis design allows for simple and robust security rules based on ownership, facilitating secure `list` operations and maintaining data integrity."
  }
}