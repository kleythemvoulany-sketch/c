/**
 * @fileoverview Firestore Security Rules for AlBoursa Cars platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their vehicle listings.
 * Public read access is granted to FAQs, Contact Messages, and About Us content.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/listings/{listingId}: Stores vehicle listings owned by a specific user.
 * - /faqs/{faqId}: Stores frequently asked questions, publicly readable.
 * - /contactMessages/{contactMessageId}: Stores contact messages, publicly readable.
 * - /aboutUs/{aboutUsId}: Stores 'About Us' content, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own user profile and listings.
 * - Public read access is granted for FAQs, Contact Messages, and About Us content.
 * - Listing of all documents is only enabled for user-scoped subcollections.
 *
 * Denormalization for Authorization:
 *  - Vehicle listings are nested under the user's document to simplify ownership checks.
 *  - The `userId` is present in both the path and the document, allowing validation on create.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can get, update, or delete their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) User cannot get, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to vehicle listings owned by a specific user.
     * @path /users/{userId}/listings/{listingId}
     * @allow (create) User with matching UID can create a listing under their profile.
     * @allow (get, list, update, delete) User with matching UID can get, list, update, or delete their listings.
     * @deny (create) User cannot create a listing under another user's profile.
     * @deny (get, update, delete) User cannot get, update, or delete another user's listings.
     * @principle Enforces document ownership for vehicle listings.
     */
    match /users/{userId}/listings/{listingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if true;
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to FAQs.
     * @path /faqs/{faqId}
     * @allow (get, list) Anyone can read FAQs.
     * @deny (create, update, delete) No one can create, update, or delete FAQs.
     * @principle Allows public read access for FAQs.
     */
    match /faqs/{faqId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to Contact Messages.
     * @path /contactMessages/{contactMessageId}
     * @allow (get, list) Anyone can read contact messages.
     * @deny (create, update, delete) No one can create, update, or delete contact messages.
     */
    match /contactMessages/{contactMessageId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to About Us content.
     * @path /aboutUs/{aboutUsId}
     * @allow (get, list) Anyone can read About Us content.
     * @deny (create, update, delete) No one can create, update, or delete About Us content.
     */
    match /aboutUs/{aboutUsId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}