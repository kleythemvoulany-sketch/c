/**
 * @fileoverview Firestore Security Rules for AlBoursa Cars.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to certain collections like FAQs and About Us content.
 * Vehicle listings are managed under user profiles and also in a public listings collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the authenticated user can
 *   read or write their own profile.
 * - /users/{userId}/listings/{listingId}: Stores vehicle listings owned by a specific user.
 *   Only the owning user can create, read, update, or delete listings under their profile.
 * - /listings/{listingId}: Stores a denormalized collection of publicly accessible
 *   vehicle listings, mirroring the data in the user-owned listings. This enables
 *   efficient public listing and filtering. Only the owner can write a listing, all users can read.
 * - /faqs/{faqId}: Stores frequently asked questions. Publicly readable.
 * - /contactMessages/{contactMessageId}: Stores contact messages sent by users.
 *   Write operations are disallowed to prevent spam, read operations are disallowed, unless further functionality is developed.
 * - /aboutUs/{aboutUsId}: Stores "About Us" content. Publicly readable.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId}.
 * - Listing operations are secured through path-based ownership.
 * - Public listing retrieval is supported by a separate /listings collection.
 * - Contact messages are stored, but write and read operations are currently disallowed.
 * - Data validation is minimized in this prototyping phase to allow for rapid iteration.
 *
 * Denormalization for Authorization:
 * The /listings collection is denormalized to allow public read access without requiring
 * complex security rules or `get()` calls. The `userId` field within each listing in
 * this collection is critical for enforcing owner-only write access.
 *
 * Structural Segregation:
 * Publicly readable data (FAQs, About Us) is stored in top-level collections, separate
 * from user-specific data, to simplify security rules and list operations. Vehicle Listings
 * are available publicly in /listings and privately in /users/{userId}/listings/{listingId}.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @return {boolean} True if the authenticated user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId The user ID to compare against the authenticated user ID and the resource data.
     * @return {boolean} True if the authenticated user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Signed-in user can only access their own profile if the userId matches their auth.uid.
     * @deny (create) User cannot create a profile with an ID that doesn't match their auth.uid.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for vehicle listings under a user's profile.
     * @path /users/{userId}/listings/{listingId}
     * @allow (create) Signed-in user can create a listing under their own profile.
     * @allow (get, update, delete) Signed-in user can only access/modify listings under their own profile.
     * @deny (create) User cannot create a listing under another user's profile.
     * @deny (get, update, delete) User cannot access or modify listings under another user's profile.
     * @principle Enforces document ownership for vehicle listings.
     */
    match /users/{userId}/listings/{listingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for frequently asked questions.
     * @path /faqs/{faqId}
     * @allow (get, list) Any user can read FAQs.
     * @deny (create, update, delete) No user can create, update, or delete FAQs.
     * @principle Public read access for FAQs.
     */
    match /faqs/{faqId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for contact messages.
     * @path /contactMessages/{contactMessageId}
     * @deny (get, list, create, update, delete) No user can access contact messages.
     * @principle Restricts access to contact messages.
     */
    match /contactMessages/{contactMessageId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Security rules for "About Us" content.
     * @path /aboutUs/{aboutUsId}
     * @allow (get, list) Any user can read "About Us" content.
     * @deny (create, update, delete) No user can create, update, or delete "About Us" content.
     * @principle Public read access for "About Us" content.
     */
    match /aboutUs/{aboutUsId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Security rules for public vehicle listings.
     * @path /listings/{listingId}
     * @allow (get, list) Any user can read public vehicle listings.
     * @allow (create) Signed-in user can create a listing if the userId matches their auth.uid.
     * @allow (update, delete) Only the owner of the listing can update or delete it.
     * @deny (create) User cannot create a listing with a userId that doesn't match their auth.uid.
     * @principle Public read access with owner-only writes for vehicle listings.
     */
    match /listings/{listingId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}