rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile information. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete, get, list) if the user is signed in and their UID matches the userId in the path.
     *  Example: A user with UID "user123" can create/update/delete/get/list the document at /users/user123.
     * @deny (create, update, delete, get, list) if the user is not signed in or their UID does not match the userId in the path.
     *  Example: A user with UID "user456" cannot access /users/user123.
     * @principle Enforces strict document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secures vehicle listings owned by a specific user. Only the owner can read/write their listings.
     * @path /users/{userId}/listings/{listingId}
     * @allow (create, update, delete, get, list) if the user is signed in and their UID matches the userId in the path.
     *  Example: A user with UID "user123" can create/update/delete/get/list the document at /users/user123/listings/listing456.
     * @deny (create, update, delete, get, list) if the user is not signed in or their UID does not match the userId in the path.
     *  Example: A user with UID "user456" cannot access /users/user123/listings/listing456.
     * @principle Enforces strict document ownership for vehicle listings.
     */
    match /users/{userId}/listings/{listingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to FAQs. Write access is denied.
     * @path /faqs/{faqId}
     * @allow (get, list) to all users (signed in or not).
     * @deny (create, update, delete) to all users.
     * @principle Public read, restricted write for FAQs.
     */
    match /faqs/{faqId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to Contact Messages. Write access is denied.
     * @path /contactMessages/{contactMessageId}
     * @allow (get, list) to all users (signed in or not).
     * @deny (create, update, delete) to all users.
     * @principle Public read, restricted write for ContactMessages.
     */
    match /contactMessages/{contactMessageId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to About Us content. Write access is denied.
     * @path /aboutUs/{aboutUsId}
     * @allow (get, list) to all users (signed in or not).
     * @deny (create, update, delete) to all users.
     * @principle Public read, restricted write for AboutUs.
     */
    match /aboutUs/{aboutUsId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to vehicle listings. Write access is restricted to ensure only authenticated users can create, update or delete listings and that the 'userId' field matches the authenticated user's ID.
     * @path /listings/{listingId}
     * @allow (get, list) to all users (signed in or not).
     * @allow (create) to signed in users only if the 'userId' matches their UID.
     * @allow (update, delete) to signed in users only if the listing exists and the 'userId' matches their UID.
     * @deny (create, update, delete) to non-authenticated users.
     * @principle Public read, owner-only writes with authentication.
     */
    match /listings/{listingId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
  }
}