/**
 * @fileoverview Firestore Security Rules for AlBoursa Cars platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, vehicle listings,
 * and AI improvement suggestions.  Users can only access or modify data they own.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.
 * - /users/{userId}/vehicleListings/{vehicleListingId}: Stores vehicle listings created by a user.
 * - /users/{userId}/vehicleListings/{vehicleListingId}/aiImprovementSuggestions/{aiImprovementSuggestionId}: Stores AI improvement suggestions for vehicle listings.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user profiles and vehicle listings.
 * - Listing of all users is disallowed.
 *
 * Denormalization for Authorization:
 * The `userId` field is denormalized within the `VehicleListing` and `AiImprovementSuggestion`
 * documents to allow direct authorization checks without additional `get()` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile.
     * @path /users/{userId}
     * @allow (create) User with auth.uid == userId can create their profile.
     * @allow (get, update, delete) User with auth.uid == userId can read, update, and delete their profile.
     * @deny (create) User with auth.uid != userId cannot create a profile.
     * @deny (get, update, delete) User with auth.uid != userId cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.auth.uid;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == request.auth.uid;
    }

    /**
     * @description Allows users to manage their own vehicle listings.
     * @path /users/{userId}/vehicleListings/{vehicleListingId}
     * @allow (create) User with auth.uid == userId can create a vehicle listing.
     * @allow (get, update, delete) User with auth.uid == userId can read, update, and delete their own vehicle listings.
     * @deny (create) User with auth.uid != userId cannot create a vehicle listing for another user.
     * @deny (get, update, delete) User with auth.uid != userId cannot read, update, or delete another user's vehicle listings.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/vehicleListings/{vehicleListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows users to manage AI improvement suggestions for their vehicle listings.
     * @path /users/{userId}/vehicleListings/{vehicleListingId}/aiImprovementSuggestions/{aiImprovementSuggestionId}
     * @allow (create) User with auth.uid == userId can create an AI improvement suggestion for their vehicle listing.
     * @allow (get, update, delete) User with auth.uid == userId can read, update, and delete AI improvement suggestions for their vehicle listings.
     * @deny (create) User with auth.uid != userId cannot create an AI improvement suggestion for another user's vehicle listing.
     * @deny (get, update, delete) User with auth.uid != userId cannot read, update, or delete another user's AI improvement suggestions.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/vehicleListings/{vehicleListingId}/aiImprovementSuggestions/{aiImprovementSuggestionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.vehicleListingId == vehicleListingId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.vehicleListingId == vehicleListingId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.vehicleListingId == vehicleListingId;
    }
  }
}