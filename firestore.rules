/**
 * @fileOverview Firestore Security Rules for AlBoursa Cars.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their associated vehicle listings. Public listings are supported via a separate, top-level collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the authenticated user.
 * - /users/{userId}/listings/{listingId}: Stores vehicle listings owned by a specific user.
 * - /listings/{listingId}: Stores a denormalized collection of publicly accessible vehicle listings.
 * - /faqs/{faqId}: Stores frequently asked questions, publicly readable.
 * - /contactMessages/{contactMessageId}: Stores contact messages, only writable.
 * - /aboutUs/{aboutUsId}: Stores About Us content, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Users can only manage their own vehicle listings under their user ID.
 * - Public listings are readable by everyone, but creation/modification is restricted.
 * - Listing of other user's listings is not supported.
 * - FAQ and About Us data is publicly readable.
 * - Contact messages can be created by anyone but are not readable through the API.
 *
 * Denormalization for Authorization:
 * - Vehicle listings in the `/listings` collection should contain a `userId` field, mirroring the owner from `/users/{userId}/listings/{listingId}`. This allows public read access while restricting writes to the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if request.auth.uid == userId
     * @deny (get, create, update, delete, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to manage their own vehicle listings under their user profile.
     * @path /users/{userId}/listings/{listingId}
     * @allow (get, create, update, delete, list) if request.auth.uid == userId
     * @deny (get, create, update, delete, list) if request.auth.uid != userId
     * @principle Enforces strict ownership for managing user-specific vehicle listings.
     */
    match /users/{userId}/listings/{listingId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && exists(resource);
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to FAQs.
     * @path /faqs/{faqId}
     * @allow (get, list) if true
     * @deny (create, update, delete)
     * @principle Allows public read access to FAQs, while preventing unauthorized modifications.
     */
    match /faqs/{faqId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to create a contact message, but prevents reading, listing, updating or deleting them through the API.
     * @path /contactMessages/{contactMessageId}
     * @allow create: if true;
     * @deny get, list, update, delete
     * @principle Allows public creation of contact messages, while restricting access to the data.
     */
    match /contactMessages/{contactMessageId} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to 'About Us' content.
     * @path /aboutUs/{aboutUsId}
     * @allow (get, list) if true
     * @deny (create, update, delete)
     * @principle Allows public read access to 'About Us' content, while preventing unauthorized modifications.
     */
    match /aboutUs/{aboutUsId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to vehicle listings, but restricts creation, updates, and deletion to the owner.
     * @path /listings/{listingId}
     * @allow get, list: if true;
     * @deny create, update, delete: if the userId field does not match the request.auth.uid
     * @principle Allows public listing with owner-only writes, enforced by validating the userId field.
     */
    match /listings/{listingId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if true;
        allow list: if true;

        // CRITICAL: Enforce that a user can only create a listing if the userId matches their auth.uid.
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;

        // CRITICAL: The update and delete operations MUST check that the resource exists before allowing the write.
        allow update: if isSignedIn() && get(/databases/$(database)/documents/listings/$(listingId)).data.userId == request.auth.uid;
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/listings/$(listingId)).data.userId == request.auth.uid;
    }
  }
}