/**
 * @fileoverview Firestore Security Rules for AlBoursa Cars platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data (user profiles and user-owned listings), while allowing public read access to a denormalized listings collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the owning user.
 * - /users/{userId}/listings/{listingId}: Stores vehicle listings owned by a specific user, accessible only to the owner.
 * - /listings/{listingId}: Stores a publicly accessible, denormalized collection of vehicle listings. Any authenticated user can create, and only the owner can modify.
 * - /faqs/{faqId}: Stores FAQs, publicly readable, writeable by anyone.
 * - /contactMessages/{contactMessageId}: Stores contact messages, writeable and readable by anyone.
 * - /aboutUs/{aboutUsId}: Stores "About Us" content, publicly readable, writeable by anyone.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Public listing retrieval is supported by a separate `listings` collection, which contains denormalized listing data to enable filtering and listing without complex rules.
 * - FAQs, ContactMessages, and AboutUs are all publicly readable and writeable. This might be changed in future.
 *
 * Denormalization for Authorization:
 * - Vehicle listings are duplicated in both `/users/{userId}/listings/{listingId}` (private) and `/listings/{listingId}` (public).
 * - The `listings` collection MUST contain a `userId` field to identify the owner of the listing.
 *
 * Structural Segregation:
 * - Private listings are stored under the user's document, while public listings are stored in a top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profile documents. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads, updates, or deletes their profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' tries to create a profile for 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @deny (get, update, delete) User with ID 'user123' tries to read, update, or delete profile for 'user456'.
     *   - request.auth.uid: 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Explicitly disallow listing all users.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to vehicle listings owned by a specific user. Only the owner can create, read, update, and delete their listings.
     * @path /users/{userId}/listings/{listingId}
     * @allow (create) User 'user123' creates a listing.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get, update, delete) User 'user123' reads, updates, or deletes their listing.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @deny (create) User 'user123' tries to create a listing for user 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user456'
     * @deny (get, update, delete) User 'user123' tries to read, update, or delete listing for user 'user456'.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user456'
     * @principle Enforces document ownership for writes and restricts listing to the owner.
     */
    match /users/{userId}/listings/{listingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the public vehicle listings collection. Any authenticated user can create a listing, but only the owner can update or delete it.
     * @path /listings/{listingId}
     * @allow (get, list) Any user can read any listing.
     * @allow (create) User 'user123' creates a listing.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (update, delete) User 'user123' updates or deletes their listing.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @deny (create) User 'user123' tries to create a listing for user 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user456'
     * @deny (update, delete) User 'user123' tries to update or delete listing for user 'user456'.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user456'
     * @principle Allows public reads with owner-only writes, enforcing ownership via the `userId` field.
     */
    match /listings/{listingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to the FAQs collection.  For prototyping purposes, any user can read and write FAQs.
     * @path /faqs/{faqId}
     * @allow (get, list, create, update, delete) Any user can perform any operation on FAQs.
     * @principle Open access for prototyping.
     */
    match /faqs/{faqId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Controls access to the Contact Messages collection.  For prototyping purposes, any user can read and write Contact Messages.
     * @path /contactMessages/{contactMessageId}
     * @allow (get, list, create, update, delete) Any user can perform any operation on Contact Messages.
     * @principle Open access for prototyping.
     */
    match /contactMessages/{contactMessageId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Controls access to the About Us collection.  For prototyping purposes, any user can read and write About Us content.
     * @path /aboutUs/{aboutUsId}
     * @allow (get, list, create, update, delete) Any user can perform any operation on About Us content.
     * @principle Open access for prototyping.
     */
    match /aboutUs/{aboutUsId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }
}