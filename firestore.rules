/**
 * @fileoverview Firestore Security Rules for AlBoursa Cars platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data and allows public read access to vehicle listings.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Accessible only by the owning user.
 * - /users/{userId}/listings/{listingId}: Stores vehicle listings owned by a specific user. Accessible only by the owning user.
 * - /listings/{listingId}: Stores public vehicle listings. Publicly readable, but only the owner can modify.
 * - /faqs/{faqId}: Stores frequently asked questions. Publicly readable and writable.
 * - /contactMessages/{contactMessageId}: Stores contact messages. Publicly readable and writable.
 * - /aboutUs/{aboutUsId}: Stores 'About Us' content. Publicly readable and writable.
 *
 * Key Security Decisions:
 * - Disallows listing all users (no all-users `list` operation).
 * - Public collections (`/faqs`, `/contactMessages`, `/aboutUs`, `/listings`) allow `get` and `list` by anyone, including unauthenticated users.
 * - Ambiguous write access defaults to deny, requiring explicit allow statements.
 *
 * Denormalization for Authorization:
 * - The /listings/{listingId} collection REQUIRES a 'userId' field on each document to enforce owner-only writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication: Requires the user to be authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authorization: Enforces user-based authorization.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     *              Combines ownership check with document existence check for safe updates/deletes.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Robustness: Verifies document existence before destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot create a profile for 'user456'.
     * @deny (get, update, delete) User with ID 'user123' cannot read/update/delete the profile of 'user456'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for vehicle listings owned by a specific user.
     * @path /users/{userId}/listings/{listingId}
     * @allow (create) User with ID 'user123' can create a listing under their profile.
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their listings.
     * @deny (create) User with ID 'user123' cannot create a listing under 'user456' profile.
     * @deny (get, update, delete) User with ID 'user123' cannot read/update/delete listings of 'user456'.
     * @principle Enforces document ownership for user-specific vehicle listings.
     */
    match /users/{userId}/listings/{listingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for frequently asked questions.
     * @path /faqs/{faqId}
     * @allow (get, list) Anyone can read the FAQs.
     * @allow (create, update, delete) Anyone can create, update, or delete FAQs.
     * @principle Publicly accessible and modifiable FAQs.
     */
    match /faqs/{faqId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Rules for contact messages.
     * @path /contactMessages/{contactMessageId}
     * @allow (get, list) Anyone can read contact messages.
     * @allow (create, update, delete) Anyone can create, update, or delete contact messages.
     * @principle Publicly accessible and modifiable contact messages.
     */
    match /contactMessages/{contactMessageId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Rules for 'About Us' content.
     * @path /aboutUs/{aboutUsId}
     * @allow (get, list) Anyone can read the 'About Us' content.
     * @allow (create, update, delete) Anyone can create, update, or delete 'About Us' content.
     * @principle Publicly accessible and modifiable 'About Us' content.
     */
    match /aboutUs/{aboutUsId} {
      allow get, list: if true;
      allow create, update, delete: if true;
    }

    /**
     * @description Rules for public vehicle listings.
     * @path /listings/{listingId}
     * @allow (get, list) Anyone can read public vehicle listings.
     * @allow (create) Only the owner can create listings, ensuring the userId matches the authenticated user.
     * @allow (update, delete) Only the owner can update or delete listings.
     * @deny (create) If the incoming listing does not have a userId field that matches the authenticated user.
     * @deny (update, delete) If the listing does not exist or the authenticated user is not the owner.
     * @principle Publicly readable, owner-only writes for vehicle listings.
     */
    match /listings/{listingId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}