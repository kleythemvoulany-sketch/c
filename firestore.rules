/**
 * @fileOverview Firestore Security Rules for AlBoursa Cars.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (profiles and listings)
 * and allows public read access to certain collections like FAQs and About Us content.
 * A separate, top-level "listings" collection is used to support public listing and filtering,
 * with ownership enforced for creation, updates, and deletes via the userId field.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /users/{userId}/listings/{listingId}: Stores vehicle listings owned by a specific user.
 *   Only the owner can manage these listings.
 * - /faqs/{faqId}: Stores frequently asked questions. Publicly readable.
 * - /contactMessages/{contactMessageId}: Stores contact messages. Publicly writable, owner only readable.
 * - /aboutUs/{aboutUsId}: Stores 'About Us' content. Publicly readable.
 * - /listings/{listingId}: Stores vehicle listings for public display. Requires `userId` field
 *   for ownership validation on writes.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data. Listing other users is disallowed.
 * - Public read access is granted to FAQs and About Us content.
 * - Contact messages are publicly writable to allow users to submit them without authentication,
 *   but access to read them is forbidden.
 * - Listing operation for vehicleListings is allowed for all users.
 *
 * Denormalization for Authorization:
 * - Vehicle listings in the `/listings` collection are required to have a `userId` field that
 *   matches the authenticated user's UID during creation to enforce ownership.
 *
 * Structural Segregation:
 * - Private user listings are stored under `/users/{userId}/listings/{listingId}`,
 *   while public listings are stored in the top-level `/listings/{listingId}` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can manage their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete): Authenticated user with matching userId.
     * @deny (create, update, delete): Mismatched userId or unauthenticated user.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      /**
       * @description Secure vehicle listings under a user's profile. Only the owner can manage their listings.
       * @path /users/{userId}/listings/{listingId}
       * @allow (create, update, delete): Authenticated user with matching userId.
       * @deny (create, update, delete): Mismatched userId or unauthenticated user.
       * @principle Enforces document ownership for writes within a user's data tree.
       */
      match /listings/{listingId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }
      }
    }

    /**
     * @description Allow public read access to FAQs.
     * @path /faqs/{faqId}
     * @allow get, list: Any user (including unauthenticated).
     * @deny create, update, delete: Only database administrators can modify FAQs (not implemented in this ruleset).
     * @principle Allows public read access for common information.
     */
    match /faqs/{faqId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allow anyone to create contact messages, but restrict reading.
     * @path /contactMessages/{contactMessageId}
     * @allow create: Any user (including unauthenticated).
     * @deny get, list, update, delete: No one can read, update, or delete contact messages through the client.
     * @principle Allows public submission of contact messages while protecting access to them.
     */
    match /contactMessages/{contactMessageId} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allow public read access to About Us content.
     * @path /aboutUs/{aboutUsId}
     * @allow get, list: Any user (including unauthenticated).
     * @deny create, update, delete: Only database administrators can modify About Us content (not implemented in this ruleset).
     * @principle Allows public read access for common information.
     */
    match /aboutUs/{aboutUsId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure the top-level listings collection. Public read, owner-only writes.
     * @path /listings/{listingId}
     * @allow get, list: Any user (including unauthenticated) can read listings.
     * @allow create: Authenticated user whose UID matches the listing's userId field.
     * @allow update, delete: Authenticated user whose UID matches the listing's userId field and the document exists.
     * @deny create: Authenticated user whose UID does not match the listing's userId field.
     * @deny update, delete: Authenticated user whose UID matches the listing's userId field, but the document does not exist.
     * @principle Allows public listing while enforcing ownership for modifications.
     */
    match /listings/{listingId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }
  }
}