/**
 * @fileoverview Firestore Security Rules for AlBoursa Cars platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and vehicle listings.
 * FAQs are publicly readable, and contact messages are restricted to backend access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.
 * - /users/{userId}/vehicleListings/{vehicleListingId}: Stores vehicle listings owned by a specific user.
 * - /faqs/{faqId}: Stores frequently asked questions.
 * - /contactMessages/{contactMessageId}: Stores contact messages.
 *
 * Key Security Decisions:
 * - Users can only access and modify their own profile data and vehicle listings.
 * - FAQs are publicly accessible.
 * - Contact messages are only accessible by backend functions (not directly exposed to client-side reads or writes via security rules).
 * - Listing of all users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * The 'userId' field is denormalized onto the VehicleListing documents, allowing simple owner checks without additional reads.
 *
 * Structural Segregation:
 * Public (FAQs) and private (user profiles, listings) data are stored in separate collections to simplify rules and improve performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete their profile if authenticated as 'user123'.
     * @deny (create, get, update, delete) - User with ID 'user456' cannot access the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users.

      // Self-creation: A user can create their own document.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // Existing owner can update and delete.  Ownership is immutable.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to vehicle listings associated with a specific user.
     * @path /users/{userId}/vehicleListings/{vehicleListingId}
     * @allow (create) - User with ID 'user123' can create a vehicle listing under their profile.
     * @allow (get, update, delete) - User with ID 'user123' can read, update, or delete a vehicle listing under their profile.
     * @deny (create, get, update, delete) - User with ID 'user456' cannot access vehicle listings under user 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/vehicleListings/{vehicleListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Only the owner can create/update/delete vehicle listings.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to frequently asked questions.
     * @path /faqs/{faqId}
     * @allow (get, list) - Any user can read FAQs.
     * @deny (create, update, delete) - No user can create, update, or delete FAQs through client-side rules.
     * @principle FAQs are publicly readable, write operations are restricted.
     */
    match /faqs/{faqId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to contact messages.
     * @path /contactMessages/{contactMessageId}
     * @deny (get, list, create, update, delete) - No user can directly access contact messages through client-side rules.
     * @principle Contact messages are only accessible by backend functions.
     */
    match /contactMessages/{contactMessageId} {
      allow get, list, create, update, delete: if false;
    }
  }
}