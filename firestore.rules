/**
 * @fileOverview Firestore Security Rules for AlBoursa Cars platform.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, vehicle listings, and AI improvement suggestions.
 * Only the authenticated user can manage their own profile and the associated listings and suggestions. Public read access is granted to the listings collection to support open discovery of available vehicles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/vehicleListings/{vehicleListingId}: Stores vehicle listings created by each user.
 * - /users/{userId}/vehicleListings/{vehicleListingId}/aiImprovementSuggestions/{aiImprovementSuggestionId}: Stores AI improvement suggestions for vehicle listings.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Vehicle listings are publicly readable but owner-modifiable.
 * - Ownership is enforced through path-based matching and denormalized userId fields.
 * - AI improvement suggestions are only manageable by the listing owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     * @example isOwner('someUserId') // Returns true if request.auth.uid == 'someUserId'
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and if the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'user123' can create their own profile.
     *   - auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @deny (create) User 'user456' cannot create a profile for 'user123'.
     *   - auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) User 'user123' can read/update/delete their own profile.
     *   - auth.uid: 'user123'
     * @deny (get, update, delete) User 'user456' cannot read/update/delete profile of 'user123'.
     *   - auth.uid: 'user456'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for vehicle listings nested under users.
     * @path /users/{userId}/vehicleListings/{vehicleListingId}
     * @allow (create) User 'user123' can create a listing under their profile.
     *   - auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @deny (create) User 'user456' cannot create a listing under 'user123' profile.
     *   - auth.uid: 'user456'
     *   - request.resource.data.userId: 'user123'
     * @allow (get, list, update, delete) User 'user123' can read/list/update/delete their own listing.
     *   - auth.uid: 'user123'
     * @deny (get, list, update, delete) User 'user456' cannot read/list/update/delete listing of 'user123'.
     *   - auth.uid: 'user456'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/vehicleListings/{vehicleListingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for AI improvement suggestions under vehicle listings.
     * @path /users/{userId}/vehicleListings/{vehicleListingId}/aiImprovementSuggestions/{aiImprovementSuggestionId}
     * @allow (create) User 'user123' can create an AI suggestion under their listing.
     *   - auth.uid: 'user123'
     *   - request.resource.data.vehicleListingId: 'vehicleListing123' (associated with user123)
     * @deny (create) User 'user456' cannot create an AI suggestion under 'user123' listing.
     *   - auth.uid: 'user456'
     *   - request.resource.data.vehicleListingId: 'vehicleListing123'
     * @allow (get, list, update, delete) User 'user123' can read/list/update/delete their own AI suggestion.
     *   - auth.uid: 'user123'
     * @deny (get, list, update, delete) User 'user456' cannot read/list/update/delete AI suggestion of 'user123'.
     *   - auth.uid: 'user456'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/vehicleListings/{vehicleListingId}/aiImprovementSuggestions/{aiImprovementSuggestionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    
    /**
     * @description Rules for top-level listings collection. Public read, owner-only write.
     * @path /listings/{listingId}
     * @allow (get, list) Any user can read listings.
     *   - auth: null
     * @allow (create) User 'user123' can create a listing if they are the owner.
     *   - auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (update, delete) User 'user123' can update/delete their own listing.
     *   - auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @deny (create) User 'user456' cannot create a listing for 'user123'.
     *   - auth.uid: 'user456'
     *   - request.resource.data.userId: 'user123'
     * @deny (update, delete) User 'user456' cannot update/delete listing of 'user123'.
     *   - auth.uid: 'user456'
     *   - resource.data.userId: 'user123'
     * @principle Allows public read access while restricting write access to the owner.
     */
    match /listings/{listingId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }
  }
}