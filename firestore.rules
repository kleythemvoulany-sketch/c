rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get) User with ID 'user123' can read their profile.
     *   - request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' can update their profile.
     *   - request.auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' can delete their profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @deny (get) User with ID 'user456' cannot read user 'user123's profile.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.id: 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to vehicle listings for a specific user.
     * @path /users/{userId}/vehicleListings/{vehicleListingId}
     * @allow (create) User with ID 'user123' can create a listing under their ID.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.userId: 'user123'
     * @allow (get) User with ID 'user123' can read their listing.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @allow (update) User with ID 'user123' can update their listing.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @allow (delete) User with ID 'user123' can delete their listing.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @deny (create) User with ID 'user456' cannot create a listing for user 'user123'.
     *   - request.auth.uid: 'user456'
     *   - request.resource.data.userId: 'user123'
     * @deny (get) User with ID 'user456' cannot read user 'user123's listing.
     *   - request.auth.uid: 'user456'
     *   - resource.data.userId: 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/vehicleListings/{vehicleListingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && get(/databases/$(database)/documents/users/$(userId)).data.userId == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to AI improvement suggestions for a specific vehicle listing.
     * @path /users/{userId}/vehicleListings/{vehicleListingId}/aiImprovementSuggestions/{aiImprovementSuggestionId}
     * @allow (create) User with ID 'user123' can create a suggestion under their listing.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @allow (get) User with ID 'user123' can read their suggestion.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @allow (update) User with ID 'user123' can update their suggestion.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @allow (delete) User with ID 'user123' can delete their suggestion.
     *   - request.auth.uid: 'user123'
     *   - resource.data.userId: 'user123'
     * @deny (create) User with ID 'user456' cannot create a suggestion for user 'user123's listing.
     *   - request.auth.uid: 'user456'
     *   - resource.data.userId: 'user123'
     * @deny (get) User with ID 'user456' cannot read user 'user123's suggestion.
     *   - request.auth.uid: 'user456'
     *   - resource.data.userId: 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/vehicleListings/{vehicleListingId}/aiImprovementSuggestions/{aiImprovementSuggestionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && get(/databases/$(database)/documents/users/$(userId)/vehicleListings/$(vehicleListingId)).data.userId == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}